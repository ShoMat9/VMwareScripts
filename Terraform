IAM Users & Roles:

resource "aws_iam_user" "example_user" {
  name = "example_user"
}

resource "aws_iam_role" "example_role" {
  name = "example_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}
S3 Buckets:

resource "aws_s3_bucket" "example_bucket" {
  bucket = "example-bucket"
  acl    = "private"
}
EC2 Instance with User Data:

resource "aws_instance" "example_instance" {
  ami           = "ami-12345678"
  instance_type = "t2.micro"

  user_data = <<-EOT
    #!/bin/bash
    echo "Hello from user data!"
    EOT
}
Auto Scaling Group (Scale Set):

resource "aws_launch_template" "example_template" {
  instance_type = "t2.micro"

  user_data = <<-EOT
    #!/bin/bash
    echo "Hello from user data!"
    EOT
}

resource "aws_autoscaling_group" "example_asg" {
  launch_template = {
    id      = aws_launch_template.example_template.id
    version = "$Latest"
  }

  min_size = 1
  max_size = 3
}
Lambda Function:

resource "aws_lambda_function" "example_lambda" {
  function_name = "example_lambda"
  role          = aws_iam_role.example_role.arn
  handler       = "index.handler"
  runtime       = "nodejs14.x"

  filename = "example_lambda.zip"
}

resource "aws_lambda_permission" "example_permission" {
  statement_id  = "AllowExecutionFromS3"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.example_lambda.function_name
  principal     = "s3.amazonaws.com"
  source_arn    = aws_s3_bucket.example_bucket.arn
}
